
입문 B13


대부분의 것들은 sprite를 생성해서 작업


이미지를 입힐 때 이미지의 필터모드를 bilinear가 아닌 Point로 설정해야 흐릿하게 나오지 않는다. ~near는 이미지의 압축률 정도로 생각한다.
> 단 도트가 아닌 그림을 이미지로 사용할 때는 적용하지 않아도 된다.

또한 Compression을 None으로 설정 > 이것 역시 압축률에 관한 것
> 도트일때만 이렇게 설정

이미지의 크기에 맞게 pixels per unit 을 조정하면 칸에 맞게 일정한 크기로 설정할 수 있다.


각각의 sprite들은 box colider 2d, rigidbody 2d를 적용할 수 있다.


스프라이트간 발생하는 간격은 edit - project settings - physics 2D - Default Contract Offset의 수치를 0으로 만든다.




아틀라스(이미지) 사용법

아틀라스 선택후에 우측 sprite mode에서 multiple로,

이후에 sprite editor실행

slice 실행 - automatic이면 자동, cell size는 픽셀단위로 자르는 것. 단 이 경우 여백을 설정하기 위해 padding(여백)도 지정해줘야함

굳이 아틀라스를 이용하는 이유는 메모리와 cpu소모를 줄이기 위해서. 줄일수록 유리하다.



애니메이션
행동을 다중선택한 후 원하는 스프라이트에 드래그. 그러면 애니메이션 파일이 만들어진다.
애니메이션 창은 윈도우에서 별도로 불러올 수 있으니 활용.
행동을 반복하고 싶지 않으면 애니메이션 파일에서 loop time을 체크 해제



애니메이터(또는 메카늄)
- 하나의 스프라이트가 여러 가지 애니메이션을 수행하려면 알고리즘이 필요하다. 어떤 순서로 작동하는지 지정해주는 작업
- 윈도우에서 애니메이터를 선택

state들 중 default state를 지정해서 진입 이후의 상태를 설정

첫 동작을 마지막에 복붙하여 자연스러운 행동으로 바꿀 것.
또는
애니메이터에서 스테이트의 속도를 지정해주기








#2 물리 이동

이동 스크립트 제작. 스크립트는 3D와 거의 동일. 이 때 속도는 가속상태인데, 최대속도를 지정해줄 수 있다.
> rigid.velocity를 통해 속도를 지정가능. 이 때 maxSpeed라는 변수를 선언하는데, public으로 지정해주면 게임 내에서 수정가능하다.


마찰력 수정. create - material 2D에서 마찰력과 탄성력 수정 가능

공기저항. 캐릭터의 rigid body 2D 컴포넌트에서 Linear Drag를 수정. 너무 수치를 크게하면 점프 등에서 지장이 생기니 작게 지정


이동 중 급정지. 버튼을 뗐을 때, 속도를 지정해주는 알고리즘을 통해 속도를 급감시킨다. 이 경우 공기 저항 없이도 0마찰력에서 정지함


!! 일반적인 옵션에서는 이동시 캐릭터가 넘어지는 상황이 발생한다. 따라서 rigid body 2D의 Constraints의 Freeze Rotation을 체크해준다.
Z축을 체크해서 오브젝트의 회전을 얼리는 것.



스프라이트의 좌우를 바꾸는 법. sprite renderer의 flip의 x를 체크하면 됨. 즉 스크립트에서 좌우를 바꾸는 코드를 넣으면 된다.


스테이트 변경 방법 3가지. 트랜지션을 양쪽으로 해서 두 상태를 오갈 수 있게 만들고, 아래의 설정을 따른다.

애니메이터의 parameter를 추가한다. ex) bool타입의 isWalking 과 같이 생성. isWalking은 스크립트에서 코드 써주기

이후 (transition 생성후 연결선의)인스펙터의 conditions에서 추가한 파라미터를 설정한다.

추가적으로 위의 재생단계(겹치는 구간)는 스테이트가 넘어갈 때 부드럽게 넘어가는 설정인데, 2D에서는 필요없으니 설정하지 않는다.

또한 Has Exit Time을 끈다. 애니메이션이 끝날 때까지 상태를 바꾸지 않는 것으로, 예를 들어 걷기가 끝났는데도 애니메이션이 끝나지 않았다고 계속 걷게 되는 상황이 발생된다.
따라서 체크 해제하는 것.





B22

UI 만들기

UI에서 이미지를 생성하고 픽셀 퍼펙트 적용, 이후에 스프라이트 삽입

스프라이트 크기 변경시 이미지가 깨지므로 스프라이트 에디트 필요

스프라이트 모서리를 잡기 위해 Border 값을 입력해야함
 > 에디터 오른쪽 아래의 L R T B 설정

이후에 대화창을 UI에 맞게 anchor를 통해 크기 조절(alt키를 누른채로 조절하는 추가 기능이 있다)
 > alt 키로 조정한 경우 Inspector창이 조금 변경 됨
 > 이 때 right, left는 여백을 의미함

 > 추가로 shift키까지 입력하면서 조정할 경우 기준점을 바꿀 수 있음
 > 해당 기준점을 기준으로 하여 크기 및 여백 조정 가능


Text의 경우 이미지 안에 형성하기

Text도 기준점 잡고 위치 및 크기 조정



* 데이터 전달

UI 프로그래밍하기전에 스크립트에서는 using UnityEngine.UI를 추가하기

게임 매니저 스크립트와 플레이어 스크립트를 수정

이후에 public변수 꼭 설정하기


상태 전환

패널을 setactive 판정하도록 설정

이후 대화 중 플레이어의 이동을 제한
> manager.isAction ? false :  를 통해 제한


UI를 꺼둔 상태에서 시작해서 액션 시 활성/비활성이 되도록



대화창 애니메이션 넣기

직접 애니메이션 컨트롤러와 애니메이션을 만들기
> 앵커가 설정되어 있는 UI는 앵커드 포지션을 선택하는 것이 좋다






B23

오브젝트의 ID넘버와 NPC인지를 구분하는 변수만을 가진 스크립트 생성

이후 각각 스크립트를 component로 넣기


talkmanager를 만들어서 스크립트를 작성, 게임매니저와 연동하기
토크 매니저에는 각 오브젝트별 대화를 작성

주어진 대화가 모두 끝나야 대화창이 사라지도록 설정하기
> 배열의 인덱스 활용


초상화 넣기
> 대화 문장 넣듯이 각각 초상화 설정.
> 이 때 스프라이트 인덱스를 설정할 필요가 있는데, 대화 별로 표정이 바뀔 필요가 있음
 > 이 경우 대사 뒤에 :0 이런 식으로 초상화 설정이 필요함
 > 그런데 이러면 대사가 이상해지므로 split이 필요
  > split을 통해 대사와 인덱스를 구분
   > 이를 위해서는 : 뒤에 반드시 숫자가 와야한다.



B24 퀘스트 시스템

퀘스트 매니저와 퀘스트 데이터 스크립트를 생성

퀘스트 데이터 스크립트는 monobehaviour와 using 유니티엔진을 지운다

퀘스트 인덱스를 만들어서 npc와 연동하기



B26

세이브

세이브 디렉토리는 build settings의 player setttings에서
company name 과 product name으로 지정됨









