

3d오브젝트 형성 및 c# 스크립트 작성
디자인은 별도로 material을 만들어서 사용. 하지만 보통 이미지를 불러온다고 생각하자


물체에 물리적 특성을 적용하고 싶으면 rigidbody를 입힌다.
component에서 rigidbody를 찾아 추가하면 된다.

중력이 적용되며, kinematic을 체크하면 물리법칙 무시가 된다.

반대로 rigidbody없이 사물로 취급하고 싶지 않다면 isTrigger를 체크해준다.


* 스크립트

스크립트 코드는 start가 기본 적용되어 있지만, Awake를 쓰는 것이 더 일반적?
Awake에서 오브젝트 및 변수의 초기화를 하고 시작한다고 생각하자.

rigidbody를 쓰는 경우 그대로 Rigidbody라는 클래스를 이용하여 변수를 생성.



* 내장함수
** 입력을 요구하는 경우에는 Input의 메소드를 사용
> Input.GetButtonDown("Jump")

** 물리적 힘을 주는 경우에는 AddForce 함수와 ForceMode를 사용. 이 때 방향성은 벡터를 사용한다.
AddForce(벡터, ForceMode.Impulse);

벡터의 경우 Vector3 및 동적할당을 통해 3차원벡터를 표현한다.
> Vector3 vec = new Vector3(); vec(0,0,0);

x축이 초기값에서 가로이고, z축이 초기값에서 세로이다. (y축은 높이)
따라서 축 이동을 위해 GetAxis(또는 GetAxisRaw, 두 함수의 차이는 Raw는 이동값을 -1,0,1 로 제한한다는 점)함수를 사용
>Input.GetAxisRaw("Horiazontal")
>Input.GetAxisRaw("Vertical");



* 충돌 이벤트

private void OnCollisionEnter(Collision collision){
	if (collision.gameObject.name == "Floor")
		실행하고자 하는 행동
}


회전 코드
> transform.Rotate(Vector3.up * rotate_Speed * Time.deltaTime, Space.World)
>> 델타 타임을 적용해서 앱 실행 환경에 맞는 시간으로 적용되도록 하고, 월드를 통해 벡터를 global벡터를 사용하게 만든다(이 경우 유니티 창 상단에서도 변경해줘야함)
>> Vector3.up은 0,1,0으로, 단위벡터 및 y축을 기준으로 잡겠다는 뜻


** 자기 자신을 비활성화하는 코드. 조건문과 함께 사용하여 기능을 구현
gameObject.SetActive(false);


** 소리 입히기
sound source 컴포넌트를 추가하여 에셋에서 소리를 입힌다.
이 때 배경소리가 아닌 효과음이라면 play on awake는 체크해제한다.



UI


UI - Image : canvas가 생성되면 이미지 설정

UI - text에서 입력하고자 하는 글 입력

공통 : anchor 위치를 지정해서 칼각을 만든다. 이후 위치 수정.

텍스트는 게임매니저 스크립트에서 동적으로 변하도록 설정 및 여러가지 데이터를 받도록 설정.

이후 유니티에서 게임매니저에 텍스트를 입혀주면 된다.



빌드는 그냥 빌드 세팅에서 빌드 눌러주면 됨.


